{"version":3,"sources":["../../src/ui/Auth/components/Form.tsx","../../src/ui/Auth/components/internal/Label.tsx","../../src/ui/Auth/components/internal/Input.tsx","../../src/ui/Auth/components/EmailInput.tsx","../../src/ui/Auth/components/PasswordInput.tsx","../../src/ui/Auth/components/HeaderText.tsx","../../src/ui/Auth/components/internal/TextButton.tsx","../../src/ui/Auth/components/SecondaryButton.tsx","../../src/ui/Auth/components/SubmitButton.tsx","../../src/ui/Auth/components/Spacer.tsx","../../node_modules/react-hook-form/dist/index.esm.js"],"names":["Form","styled","props","display","justifyContent","minWidth","width","padding","boxShadow","borderRadius","flexDirection","fontFamily","margin","position","top","left","right","bottom","React","Label","TextFieldRoot","maxWidth","height","TextField","background","border","Bar","placeholder","id","htmlFor","label","autoComplete","type","required","HeaderText","fontSize","fontWeight","letterSpacing","marginBlockStart","marginBlockEnd","marginInlineStart","marginInlineEnd","marginTop","TextButton","cursor","color","whiteSpace","SecondaryButton","SubmitButtonRoot","SubmitButton","verticalAlign","textAlign","textOverflow","overflow","outline","boxSizing","style","isCheckBoxInput","element","isDateObject","data","Date","isNullOrUndefined","value","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","some","current","substring","search","getNodeParentName","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","omit","source","copy","Object","assign","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","defineProperty","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","useSubscribe","_props","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isFunction","objectHasFunction","appendErrors","validateAllFieldCriteria","errors","message","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","ref","focus","refs","isWatched","isBlurEvent","has","watchName","startsWith","slice","cloneObject","Set","createSubject","_observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isBoolean","isFileInput","isHTMLElement","HTMLElement","isMultipleSelect","isRadioInput","isRadioOrCheckbox","isWeb","window","document","live","contains","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","attributes","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","getFieldValue","every","files","selectedOptions","getResolverOptions","_fields","criteriaMode","shouldUseNativeValidation","isRegex","RegExp","getRuleValue","rule","hasValidation","mount","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","error","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","isMessage","getValidateError","getValueAndMessage","validationData","validateField","inputValue","a","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","dirtyFields","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldSetFields","fieldValues","argA","argB","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","onChange","shouldSkipValidation","deps","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","all","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","fieldRef","querySelectorAll","radioOrCheckbox","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","_a","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","control","useForm","_formControl","updateFormState"],"mappings":"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","file":"static/js/0.5efb9386.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Form = styled.form(props => ({\n    display: \"flex\",\n    justifyContent: \"center\",\n    minWidth: 300,\n    width: 380,\n    padding: '33px 55px',\n    boxShadow: '0 5px 10px 0 rgb(0 0 0 / 10%)',\n    borderRadius: 10,\n    flexDirection: 'column',\n    fontFamily: \"inherit\",\n    margin: '6% auto 50px',\n    '@media (max-width: 520px)': {\n        margin: '0px !important',\n        position: 'fixed !important',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        width: 'initial !important'\n    },\n    ...(props.theme.form ? { ...props.theme.form } : {})\n}))\n\nexport default function (props: React.FormHTMLAttributes<HTMLFormElement>) {\n    return (\n        <Form {...props}>{props.children}</Form>\n    )\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Label = styled.label(props => ({\n    display: \"none\",\n    fontFamily: \"inherit\",\n    ...(props.theme.textFieldLabel ? { ...props.theme.textFieldLabel } : {})\n}))\n\nexport default function (props: React.LabelHTMLAttributes<HTMLLabelElement>) {\n    return (<Label {...props} />)\n}\n","import React from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport styled from 'styled-components';\nimport Label from './Label';\n\nconst TextFieldRoot = styled.div(props => ({\n    position: 'relative',\n    width: '100%',\n    maxWidth: '100%',\n    padding: 0,\n    height: 46,\n    fontFamily: \"inherit\",\n    ...(props.theme.textFieldRoot ? { ...props.theme.textFieldRoot } : {})\n}))\n\nconst TextField = styled.input(props => ({\n    display: \"block\",\n    width: '100%',\n    background: '0 0',\n    border: 'none',\n    fontFamily: \"inherit\",\n    ...(props.theme.textField ? { ...props.theme.textField } : {})\n}))\n\nconst Bar = styled.div(props => props.theme.textFieldBar ? { ...props.theme.textFieldBar } : {})\n\ninterface ITextField extends React.InputHTMLAttributes<HTMLInputElement> {\n    label: string\n    register(): UseFormRegisterReturn\n}\n\nexport default function (props: ITextField) {\n    return (\n        <TextFieldRoot>\n            <TextField placeholder=\"&nbsp;\" {...props} {...props.register()} id={\"textField-\" + props.label.replace(/[^a-zA-Z]+/g, '')} />\n            <Bar />\n            <Label htmlFor={\"textField-\" + props.label.replace(/[^a-zA-Z]+/g, '')}>{props.label}</Label>\n        </TextFieldRoot>\n    )\n}\n","import React, { forwardRef } from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport Input from './internal/Input';\n\ninterface ITextField extends React.InputHTMLAttributes<HTMLInputElement> {\n    label?: string\n    register(): UseFormRegisterReturn\n}\n\nexport default function(props: ITextField) {\n    return (\n        <Input label=\"Email\" autoComplete=\"email\" {...props} type=\"email\" required />\n    )\n}\n","import React from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport Input from './internal/Input';\n\ninterface ITextField extends React.InputHTMLAttributes<HTMLInputElement> {\n    label?: string;\n    register(): UseFormRegisterReturn;\n}\n\nexport default function(props: ITextField) {\n    return (\n        <Input label=\"Password\" {...props} type=\"password\" required />\n    )\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst HeaderText = styled.h1(props => ({\n    fontFamily: \"inherit\",\n    fontSize: 24,\n    fontWeight: 500,\n    letterSpacing: -.2,\n    marginBlockStart: '0.67em',\n    marginBlockEnd: '0.67em',\n    marginInlineStart: 0,\n    marginInlineEnd: 0,\n    marginTop: '16px !important',\n    ...(props.theme.headerText ? { ...props.theme.headerText } : {})\n}))\n\nexport default function (props: React.HTMLAttributes<HTMLHeadingElement>) {\n    return (\n        <HeaderText {...props} />\n    )\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst TextButton = styled.button(props => ({\n    cursor: \"pointer\",\n    color: '#635bff',\n    whiteSpace: 'nowrap',\n    fontWeight: 500,\n    fontSize: 14,\n    margin: 0,\n    background: 'none',\n    border: 'none',\n    ...(props.theme.textButton ? { ...props.theme.textButton } : {})\n}))\n\nexport default function (props: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n    return (\n        <TextButton {...props} type=\"button\" />\n    )\n}\n","import React from 'react';\nimport TextButton from './internal/TextButton';\nimport styled from 'styled-components';\n\nconst SecondaryButton = styled(TextButton)(props => ({\n    margin: '15px',\n    ...(props.theme.secondaryButton ? { ...props.theme.secondaryButton } : {})\n}))\n\nexport default function (props: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n    return (\n        <SecondaryButton {...props} />\n    )\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst SubmitButtonRoot = styled.div(props => props.theme.submitButtonRoot ? props.theme.submitButtonRoot : {});\n\nconst SubmitButton = styled.button(props => ({\n    position: 'relative',\n    border: \"none\",\n    verticalAlign: \"middle\",\n    textAlign: \"center\",\n    textOverflow: \"ellipsis\",\n    overflow: \"hidden\",\n    outline: \"none\",\n    cursor: \"pointer\",\n    boxSizing: 'border-box',\n    ...(props.theme.submitButton ? { ...props.theme.submitButton } : {})\n}))\n\nexport default function (props: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n    return (\n        <SubmitButtonRoot>\n            <SubmitButton type=\"submit\" {...props} />\n        </SubmitButtonRoot>\n    )\n}\n","import React from 'react';\n\ninterface ISpacer {\n    size?: \"xlarge\" | \"large\" | \"medium\" | \"small\"\n}\n\nexport default function (props: ISpacer) {\n    switch (props.size) {\n        case \"xlarge\":\n            return <div style={{ height: 64 }} />   \n        case \"large\":\n            return <div style={{ height: 58 }} />            \n        case \"small\":\n            return <div style={{ height: 16 }} />\n        default:\n            return <div style={{ height: 37 }} />\n    }\n}\n","import * as React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (data) => data instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/.\\d/)) || name;\n\nvar isNameInFieldArray = (names, name) => [...names].some((current) => getNodeParentName(name) === current);\n\nvar compact = (value) => (value || []).filter(Boolean);\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (isObject(obj) && path) {\r\n        const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n        return isUndefined(result) || result === obj\r\n            ? isUndefined(obj[path])\r\n                ? defaultValue\r\n                : obj[path]\r\n            : result;\r\n    }\r\n    return undefined;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nvar omit = (source, key) => {\r\n    const copy = Object.assign({}, source);\r\n    delete copy[key];\r\n    return copy;\r\n};\n\nconst HookFormContext = React.createContext(null);\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\nconst FormProvider = (props) => (React.createElement(HookFormContext.Provider, { value: omit(props, 'children') }, props.children));\n\nvar getProxyFormState = (formState, _proxyFormState, localProxyFormState, isRoot = true) => {\r\n    function createGetter(prop) {\r\n        return () => {\r\n            if (prop in formState) {\r\n                if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\r\n                    _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[prop] = true);\r\n                return formState[prop];\r\n            }\r\n            return undefined;\r\n        };\r\n    }\r\n    const result = {};\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: createGetter(key),\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const formState = omit(formStateData, 'name');\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const tearDown = (subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        };\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => tearDown(subscription);\r\n    }, [props.disabled]);\r\n}\n\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        callback: (value) => shouldSubscribeByName(_name.current, value.name, exact) &&\r\n            shouldRenderFormState(value, _localProxyFormState.current) &&\r\n            updateFormState(Object.assign(Object.assign({}, control._formState), value)),\r\n        subject: control._subjects.state,\r\n    });\r\n    return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    const isArray = Array.isArray(names);\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (isArray) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback: (formState) => {\r\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n                const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n                updateValue(isUndefined(_name.current) ||\r\n                    (isObject(fieldValues) && !objectHasFunction(fieldValues))\r\n                    ? Object.assign({}, fieldValues) : Array.isArray(fieldValues)\r\n                    ? [...fieldValues]\r\n                    : fieldValues);\r\n            }\r\n        },\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => {\r\n        control._removeUnmounted();\r\n    });\r\n    return value;\r\n}\n\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: !isArrayField,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    const registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), { value }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            if (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField) {\r\n                control.unregister(name, { keepDefaultValue: true });\r\n            }\r\n            else {\r\n                updateMounted(name, false);\r\n            }\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            onChange: (event) => {\r\n                registerProps.onChange({\r\n                    target: {\r\n                        value: getEventValue(event),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.CHANGE,\r\n                });\r\n            },\r\n            onBlur: () => {\r\n                registerProps.onBlur({\r\n                    target: {\r\n                        value: get(control._formValues, name),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.BLUR,\r\n                });\r\n            },\r\n            name,\r\n            value,\r\n            ref: (elm) => {\r\n                const field = get(control._fields, name);\r\n                if (elm && field && elm.focus) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            },\r\n        },\r\n        formState,\r\n        fieldState: {\r\n            invalid: !!get(formState.errors, name),\r\n            isDirty: !!get(formState.dirtyFields, name),\r\n            isTouched: !!get(formState.touchedFields, name),\r\n            error: get(formState.errors, name),\r\n        },\r\n    };\r\n}\n\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? Object.assign(Object.assign({}, errors[name]), { types: Object.assign(Object.assign({}, (errors[name] && errors[name].types ? errors[name].types : {})), { [type]: message || true }) }) : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const _f = field._f;\r\n            const current = omit(field, '_f');\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus && isUndefined(_f.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (_f.refs) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(current)) {\r\n                focusFieldBy(current, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar mapCurrentIds = (values, _fieldIds, keyName) => values.map((value, index) => {\r\n    const output = _fieldIds.current[index];\r\n    return Object.assign(Object.assign({}, value), (output ? { [keyName]: output[keyName] } : {}));\r\n});\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar mapIds = (values = [], keyName) => values.map((value) => (Object.assign(Object.assign({}, (value[keyName] ? {} : { [keyName]: generateId() })), value)));\n\nfunction append(data, value) {\r\n    return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\r\n}\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (isArray || isObject(data)) {\r\n        copy = isArray ? [] : {};\r\n        for (const key in data) {\r\n            if (isFunction(data[key])) {\r\n                copy = data;\r\n                break;\r\n            }\r\n            copy[key] = cloneObject(data[key]);\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (Array.isArray(data)) {\r\n        if (isUndefined(data[to])) {\r\n            data[to] = undefined;\r\n        }\r\n        data.splice(to, 0, data.splice(from, 1)[0]);\r\n        return data;\r\n    }\r\n    return [];\r\n};\n\nvar omitKeys = (fields, keyName) => fields.map((field = {}) => omit(field, keyName));\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\nconst useFieldArray = (props) => {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(mapIds(control._getFieldArray(name), keyName));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    useSubscribe({\r\n        callback: ({ values, name: fieldArrayName }) => {\r\n            if (fieldArrayName === _name.current || !fieldArrayName) {\r\n                setFields(mapIds(get(values, _name.current), keyName));\r\n            }\r\n        },\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValuesWithKey) => {\r\n        const updatedFieldArrayValues = omitKeys(updatedFieldArrayValuesWithKey, keyName);\r\n        _actioned.current = true;\r\n        set(control._formValues, name, updatedFieldArrayValues);\r\n        return updatedFieldArrayValues;\r\n    }, [control, name, keyName]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(appendValue, keyName));\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        control._names.focus = getFocusFieldName(name, fieldArrayValues.length - 1, options);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, append, {\r\n            argA: fillEmptyArray(value),\r\n        }, fieldArrayValues);\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(convertToArrayPayload(cloneObject(value)), keyName));\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        }, fieldArrayValues);\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index);\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, removeArrayAt, {\r\n            argA: index,\r\n        }, fieldArrayValues);\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(cloneObject(value)), keyName));\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        }, fieldArrayValues);\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\r\n        swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, fieldArrayValues, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\r\n        moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, fieldArrayValues, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\r\n        const updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\r\n        _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\r\n        const fieldArrayValues = updateValues(_fieldIds.current);\r\n        setFields(_fieldIds.current);\r\n        control._updateFieldArray(name, updateAt, {\r\n            argA: index,\r\n            argB: value,\r\n        }, fieldArrayValues, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\r\n        const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\r\n        setFields(updatedFieldArrayValuesWithKey);\r\n        control._updateFieldArray(name, () => updatedFieldArrayValuesWithKey, {}, fieldArrayValues, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current) {\r\n            control._executeSchema([name]).then((result) => {\r\n                const error = get(result.errors, name);\r\n                if (error && error.type && !get(control._formState.errors, name)) {\r\n                    set(control._formState.errors, name, error);\r\n                    control._subjects.state.next({\r\n                        errors: control._formState.errors,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => key.startsWith(control._names.focus));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control, keyName]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && set(control._formValues, name, []);\r\n        return () => {\r\n            if (control._options.shouldUnregister || shouldUnregister) {\r\n                control.unregister(name);\r\n            }\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control, keyName]),\r\n        move: React.useCallback(move, [updateValues, name, control, keyName]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\r\n        append: React.useCallback(append$1, [updateValues, name, control, keyName]),\r\n        remove: React.useCallback(remove, [updateValues, name, control, keyName]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\r\n        update: React.useCallback(update, [updateValues, name, control, keyName]),\r\n        replace: React.useCallback(replace, [updateValues, name, control, keyName]),\r\n        fields: fields,\r\n    };\r\n};\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isHTMLElement = (value) => value instanceof HTMLElement;\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nvar live = (ref) => isHTMLElement(ref) && document.contains(ref);\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) &&\r\n                        !objectRef.filter((data) => (isObject(data) && !isEmptyObject(data)) || isBoolean(data)).length))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : Object.assign({}, markFieldsDirty(data[key]));\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : +value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? undefined\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, appendErrorsCurry(exceedMax ? maxType : minType, message));\r\n    };\r\n    if (required &&\r\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n            (isBoolean(inputValue) && !inputValue) ||\r\n            (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n            (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: inputRef }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber ||\r\n                parseFloat(inputValue);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message,\r\n                ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: inputRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = Object.assign(Object.assign({}, defaultOptions), props);\r\n    let _formState = {\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = _options.defaultValues || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback, wait) => (...args) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(() => callback(...args), wait);\r\n    };\r\n    const _updateValid = async (shouldSkipRender) => {\r\n        let isValid = false;\r\n        if (_proxyFormState.isValid) {\r\n            isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuildInValidation(_fields, true);\r\n            if (!shouldSkipRender && isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    const _updateFieldArray = (name, method, args, values = [], shouldSetValues = true, shouldSetFields = true) => {\r\n        _stateFlags.action = true;\r\n        if (shouldSetFields && get(_fields, name)) {\r\n            const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n            shouldSetValues && set(_fields, name, fieldValues);\r\n        }\r\n        if (Array.isArray(get(_formState.errors, name))) {\r\n            const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n            shouldSetValues && set(_formState.errors, name, errors);\r\n            unsetEmptyArray(_formState.errors, name);\r\n        }\r\n        if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\r\n            const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n            shouldSetValues &&\r\n                set(_formState.touchedFields, name, touchedFields);\r\n            unsetEmptyArray(_formState.touchedFields, name);\r\n        }\r\n        if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\r\n            _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n        }\r\n        _subjects.state.next({\r\n            isDirty: _getDirty(name, values),\r\n            dirtyFields: _formState.dirtyFields,\r\n            errors: _formState.errors,\r\n            isValid: _formState.isValid,\r\n        });\r\n    };\r\n    const updateErrors = (name, error) => (set(_formState.errors, name, error),\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        }));\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, get(_defaultValues, name));\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n        }\r\n        _stateFlags.mount && _updateValid();\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isCurrentTouched, shouldRender = true) => {\r\n        let isFieldDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n        if (_proxyFormState.isDirty) {\r\n            const isPreviousFormDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            isFieldDirty = isPreviousFormDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && !isCurrentTouched) {\r\n            const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n        }\r\n        if (isCurrentTouched && !isPreviousFieldTouched) {\r\n            set(_formState.touchedFields, name, isCurrentTouched);\r\n            output.touchedFields = _formState.touchedFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    (_proxyFormState.touchedFields &&\r\n                        isPreviousFieldTouched !== isCurrentTouched);\r\n        }\r\n        isFieldDirty && shouldRender && _subjects.state.next(output);\r\n        return isFieldDirty ? output : {};\r\n    };\r\n    const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback =\r\n                delayErrorCallback || debounce(updateErrors, props.delayError);\r\n            delayErrorCallback(name, error);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) &&\r\n            !shouldSkipRender) {\r\n            const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), (shouldUpdateValid ? { isValid } : {})), { errors: _formState.errors, name });\r\n            _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating && !validateFields[name]) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => _options.resolver\r\n        ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation))\r\n        : {};\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuildInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const fieldReference = field._f;\r\n                const fieldValue = omit(field, '_f');\r\n                if (fieldReference) {\r\n                    const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\r\n                    if (fieldError[fieldReference.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!shouldOnlyCheckValid) {\r\n                        fieldError[fieldReference.name]\r\n                            ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name])\r\n                            : unset(_formState.errors, fieldReference.name);\r\n                    }\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => {\r\n        const fieldValues = Object.assign({}, (_stateFlags.mount\r\n            ? _formValues\r\n            : isUndefined(defaultValue)\r\n                ? _defaultValues\r\n                : isString(names)\r\n                    ? { [names]: defaultValue }\r\n                    : defaultValue));\r\n        return generateWatchOutput(names, _names, fieldValues, isGlobal);\r\n    };\r\n    const _getFieldArray = (name) => get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []);\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((selectRef) => (selectRef.selected = fieldValue.includes(selectRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                : fieldValue === checkboxRef.value))\r\n                            : (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (!isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        set(_formValues, name, value);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, value),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(value)\r\n                ? setValues(name, value, options)\r\n                : setFieldValue(name, value, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            set(_formValues, name, fieldValue);\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                return (shouldRender &&\r\n                    _subjects.state.next(Object.assign({ name }, (watched ? {} : fieldState))));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name] ? +1 : 1;\r\n            _proxyFormState.isValidating &&\r\n                _subjects.state.next({\r\n                    isValidating: true,\r\n                });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                isValid = await _updateValid(true);\r\n            }\r\n            field._f.deps && trigger(field._f.deps);\r\n            shouldRenderByError(false, name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuildInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuildInValidation(_fields);\r\n        }\r\n        _subjects.state.next(Object.assign(Object.assign(Object.assign({}, (!isString(name) ||\r\n            (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n            ? {}\r\n            : { name })), (_options.resolver ? { isValid } : {})), { errors: _formState.errors, isValidating: false }));\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = Object.assign(Object.assign({}, _defaultValues), (_stateFlags.mount ? _formValues : {}));\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n            isValid: true,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, Object.assign(Object.assign({}, error), { ref }));\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (info) => name(_getWatch(undefined, defaultValue), info),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next(Object.assign(Object.assign({}, _formState), (!options.keepDirty ? {} : { isDirty: _getDirty() })));\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        set(_fields, name, {\r\n            _f: Object.assign(Object.assign(Object.assign({}, (field && field._f ? field._f : { ref: { name } })), { name, mount: true }), options),\r\n        });\r\n        _names.mount.add(name);\r\n        !isUndefined(options.value) &&\r\n            !options.disabled &&\r\n            set(_formValues, name, get(_formValues, name, options.value));\r\n        field\r\n            ? isBoolean(options.disabled) &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true);\r\n        return Object.assign(Object.assign(Object.assign({}, (isBoolean(options.disabled) ? { disabled: options.disabled } : {})), (_options.shouldUseNativeValidation\r\n            ? {\r\n                required: !!options.required,\r\n                min: getRuleValue(options.min),\r\n                max: getRuleValue(options.max),\r\n                minLength: getRuleValue(options.minLength),\r\n                maxLength: getRuleValue(options.maxLength),\r\n                pattern: getRuleValue(options.pattern),\r\n            }\r\n            : {})), { name,\r\n            onChange, onBlur: onChange, ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    if (fieldRef === field._f.ref ||\r\n                        (radioOrCheckbox &&\r\n                            compact(field._f.refs).find((option) => option === fieldRef))) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: radioOrCheckbox\r\n                            ? Object.assign(Object.assign({}, field._f), { refs: [...compact(field._f.refs).filter(live), fieldRef], ref: { type: fieldRef.type, name } }) : Object.assign(Object.assign({}, field._f), { ref: fieldRef }),\r\n                    });\r\n                    !options.disabled && updateValidAndValue(name, false, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            } });\r\n    };\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = _options.shouldUnregister\r\n            ? cloneObject(_formValues)\r\n            : Object.assign({}, _formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuildInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors) &&\r\n                Object.keys(_formState.errors).every((name) => get(fieldValues, name))) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                onInvalid && (await onInvalid(_formState.errors, e));\r\n                _options.shouldFocusError &&\r\n                    focusFieldBy(_fields, (key) => get(_formState.errors, key), _names.mount);\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (isUndefined(options.defaultValue)) {\r\n            setValue(name, get(_defaultValues, name));\r\n        }\r\n        else {\r\n            setValue(name, options.defaultValue);\r\n            set(_defaultValues, name, options.defaultValue);\r\n        }\r\n        if (!options.keepTouched) {\r\n            unset(_formState.touchedFields, name);\r\n        }\r\n        if (!options.keepDirty) {\r\n            unset(_formState.dirtyFields, name);\r\n            _formState.isDirty = options.defaultValue\r\n                ? _getDirty(name, get(_defaultValues, name))\r\n                : _getDirty();\r\n        }\r\n        if (!options.keepError) {\r\n            unset(_formState.errors, name);\r\n            _proxyFormState.isValid && _updateValid();\r\n        }\r\n        _subjects.state.next(Object.assign({}, _formState));\r\n    };\r\n    const reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (isWeb) {\r\n                for (const name of _names.mount) {\r\n                    const field = get(_fields, name);\r\n                    if (field && field._f) {\r\n                        const fieldReference = Array.isArray(field._f.refs)\r\n                            ? field._f.refs[0]\r\n                            : field._f.ref;\r\n                        try {\r\n                            isHTMLElement(fieldReference) &&\r\n                                fieldReference.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _fields = {};\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty\r\n                ? _formState.isDirty\r\n                : keepStateOptions.keepDefaultValues\r\n                    ? !deepEqual(formValues, _defaultValues)\r\n                    : false,\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty\r\n                ? _formState.dirtyFields\r\n                : (keepStateOptions.keepDefaultValues && formValues\r\n                    ? Object.entries(formValues).reduce((previous, [key, value]) => (Object.assign(Object.assign({}, previous), { [key]: value !== get(_defaultValues, key) })), {})\r\n                    : {}),\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors\r\n                ? _formState.errors\r\n                : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n    };\r\n    const setFocus = (name) => {\r\n        const field = get(_fields, name)._f;\r\n        (field.ref.focus ? field.ref : field.refs[0]).focus();\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            _executeSchema,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            set _fields(value) {\r\n                _fields = value;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            set _formValues(value) {\r\n                _formValues = value;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            set _defaultValues(value) {\r\n                _defaultValues = value;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = Object.assign(Object.assign({}, _options), value);\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n    };\r\n}\n\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    });\r\n    if (_formControl.current) {\r\n        _formControl.current.control._options = props;\r\n    }\r\n    else {\r\n        _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), { formState });\r\n    }\r\n    const control = _formControl.current.control;\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback: (value) => {\r\n            if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n                control._formState = Object.assign(Object.assign({}, control._formState), value);\r\n                updateFormState(Object.assign({}, control._formState));\r\n            }\r\n        },\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.js.map\n"],"sourceRoot":""}