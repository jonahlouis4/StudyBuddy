{"version":3,"sources":["components/Home.js","components/QuestionsModal.js","components/Questions.js","components/pages/QuizEnter.js","components/pages/QuizResult.js","components/pages/QuizComplete.js","components/Quiz.js","App.js","reportWebVitals.js","index.js"],"names":["containerVariants","hidden","x","opacity","visible","transition","staggerChildren","exit","fadeIn","Home","div","className","variants","initial","animate","h1","h2","to","buttonVariants","hover","scale","tap","QuestionsModal","props","Modal","size","aria-labelledby","centered","Header","Title","id","Body","questionlist","length","Footer","button","whileHover","whileTap","onClick","onHide","msgVariants","active","inactive","Questions","addQA","delQA","mainQA","errId","tNormClass","tErrClass","useState","question","answer","QA","setQA","questionClass","answerClass","textAreaClass","setTextAreaClass","React","modalShow","setModalShow","success","errQuestion","errAnswer","msgValidation","setMsgValidation","message","msg","setMsg","handleChange","e","prevQA","target","value","validate","valid","prevMsg","prevClass","questionList","map","icon","faTrash","show","faChevronLeft","onSubmit","isValid","preventDefault","reset","p","textarea","name","onChange","input","type","QuizEnter","QAcopy","getResult","currQuestion","addAnswer","containerVariantsChild","lclAns","setLclAns","prevAnswer","QuizResult","setQuestionIndex","QuizComplete","emptyAnswer","Row","Col","Quiz","setCurrQuestion","setAnswer","result","setResult","indexNum","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","setBody","App","location","useLocation","exitBeforeEnter","basename","exact","path","component","filter","currQA","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f7c1d3e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { motion } from 'framer-motion'\r\n\r\n/** Variant for main container */\r\nconst containerVariants = {\r\n    hidden: { x: -300, opacity: 0,},\r\n    visible: { x: 0, opacity: 1, \r\n        transition: { staggerChildren: 0.1 } },\r\n    exit: { x: -300, opacity: 0 }\r\n  };\r\n/** Fade in variant */\r\nconst fadeIn = {\r\n    hidden: { opacity: 0 },\r\n    visible: { opacity: 1 }\r\n}\r\n\r\n/** Home page of Study Buddy */\r\nconst Home = () => {\r\n    return (\r\n        <motion.div \r\n        className=\"homeC container\" \r\n        variants={containerVariants} \r\n        initial=\"hidden\" \r\n        animate=\"visible\"\r\n        exit=\"exit\">\r\n            {/* Header */}\r\n            <div className=\"home-header\">\r\n                <motion.h1 variants={fadeIn} >study buddy</motion.h1>\r\n                <motion.h2 variants={fadeIn} >, a simple flash card web application designed for studying.</motion.h2>\r\n            </div>\r\n            {/* Body */}\r\n            <div className=\"Home-Content\">\r\n                <motion.div variants={fadeIn}><Link to=\"/questions\" className=\"home-links\">add a question</Link></motion.div>\r\n                <br />\r\n                <motion.div variants={fadeIn}><Link to=\"/quiz\" className=\"home-links\">start the quiz</Link></motion.div> \r\n            </div>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport { motion } from 'framer-motion'\r\n\r\n/** Variants for close button */\r\nconst buttonVariants = {\r\n    hover: { scale: 1.1 },\r\n    tap: { scale: 0.9 }\r\n  }\r\n\r\n  /**\r\n   * Modal for viewing and deleting questions + answers that exists\r\n   * @param {prop} props - props passed from Question.js\r\n   */\r\nconst QuestionsModal = (props) => {\r\n    /** Returns list if questions exists or a message if it's empty */\r\n    const verifyEmpty = () => {\r\n        if (props.questionlist.length === 0) { return <p>No questions exists.</p> } \r\n        else { return props.questionlist }   \r\n    }\r\n    \r\n    return (\r\n        <Modal {...props} size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered >\r\n            <Modal.Header >\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">My Questions</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className=\"modal-body\">\r\n                <div> { verifyEmpty() } </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <motion.button \r\n                variants={buttonVariants} \r\n                whileHover=\"hover\" \r\n                whileTap=\"tap\" \r\n                onClick={props.onHide} \r\n                className=\"main-btn\">Close</motion.button>\r\n            </Modal.Footer>\r\n        </Modal>  \r\n    )\r\n}\r\n\r\nexport default QuestionsModal\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { motion } from 'framer-motion'\r\nimport QuestionsModal from './QuestionsModal'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\n/** Variant for main container */\r\nconst containerVariants = {\r\n    hidden: { x: 300, opacity: 0,},\r\n    visible: { x: 0, opacity: 1, \r\n        transition: { staggerChildren: 0.1 } },\r\n    exit: { x: 300, opacity: 0 }\r\n  };\r\n  /** Vairants for buttons */\r\n  const buttonVariants = {\r\n    hover: { scale: 1.1 },\r\n    tap: { scale: 0.9 }\r\n  }\r\n  /** Variants for message */ \r\n  const msgVariants = { \r\n    active: { opacity: 1, x: 10 },\r\n    inactive: { opacity: 0, x: 0  }\r\n}\r\n/** Fade in variant */\r\nconst fadeIn = {\r\n    hidden: { opacity: 0 },\r\n    visible: { opacity: 1 }\r\n}\r\n\r\n/**\r\n * Operates the addition of questions + answers and the ability\r\n * to view and remote them.\r\n * @param {function} addQA - Reference to function that adds a question + answer\r\n * @param {function} delQA - Reference to function that removes a question + answer\r\n * @param {function} mainQA - Reference to the QA state from App.js \r\n */\r\nconst Questions = ({addQA, delQA, mainQA}) => { \r\n    /** Stores the valid ID for success message */\r\n    const validId = \"q-msg-valid\";   \r\n    /** Stores the error ID for error message */                   \r\n    const errId = \"q-msg-error\"; \r\n    /** Stores the normal class colour for text area */\r\n    const tNormClass = \"textArea areaNormal\";\r\n    /** Stores the error class colour for text area */\r\n    const tErrClass = \"textArea areaError\";\r\n    /** Local useStates for questions and answers */\r\n    const [QA, setQA] = useState({question:\"\", answer:\"\"})\r\n    /** Local useStates for TextArea class (Sets the colour) */\r\n    const [textAreaClass, setTextAreaClass] = useState({questionClass:tNormClass, answerClass: tNormClass})\r\n    /** Sets value to show or hide modal */\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    /** Determines if message is shown or not */\r\n    const [msgValidation, setMsgValidation] = useState({success: false, errQuestion: false, errAnswer: false})\r\n    /** Stores the message for below the form */\r\n    const [msg, setMsg] = useState({message:\"\", id:\"\"})\r\n\r\n    /**\r\n     * Handles every user change\r\n     * @param {event} e - event that user triggerred\r\n     */\r\n    const handleChange = (e) => { \r\n        // Hide all messages \r\n        setMsgValidation({success: false, errQuestion: false, errAnswer: false})\r\n        // Add every input value to local useState QA\r\n        setQA((prevQA) => ({...prevQA, [e.target.id]: e.target.value})) \r\n    }\r\n\r\n    /**\r\n     * Handles Submit button\r\n     * @param {event} e - event that user triggerred \r\n     */\r\n    const handleSubmit = (e) => { \r\n        const isValid = validate();\r\n        e.preventDefault();\r\n        e.target.reset();\r\n\r\n        // Check if form is valid \r\n        if (isValid) {       \r\n            setMsgValidation(prevMsg => { return {...prevMsg, success: true }}); \r\n            setMsg({message: \"question has been added!\", id:validId});        \r\n            addQA(QA.question, QA.answer);               \r\n        } else {\r\n            setMsgValidation(prevMsg => { return {...prevMsg, success: false } }) \r\n        }\r\n        setQA({question: \"\", answer: \"\"}) \r\n    }\r\n\r\n    /** Verifies if fields are empty */\r\n    const validate = () => {\r\n        // false if user did not fill fields \r\n        var valid = true;\r\n\r\n        // Both questions are empty \r\n        if (QA.question === \"\" && QA.answer === \"\") {\r\n            setMsg({message: \"*please enter a question and a answer\", id:errId})\r\n            setTextAreaClass({questionClass: tErrClass, answerClass: tErrClass });\r\n            setMsgValidation(prevMsg => { return {...prevMsg, errQuestion: true, errAnswer: true } })\r\n            return valid = false; \r\n        }\r\n        // Question is empty only \r\n        if (QA.question === \"\") { \r\n            setMsg({message: \"*please enter a question\", id:errId})\r\n            setTextAreaClass(prevClass => { return {...prevClass, questionClass: tErrClass }})\r\n            setMsgValidation(prevMsg => { return {...prevMsg, errQuestion: true } })\r\n            valid = false; \r\n        } else { \r\n            setTextAreaClass(prevClass => { return {...prevClass, questionClass: tNormClass }}) \r\n        }\r\n        // Answer is empty only \r\n        if (QA.answer === \"\") {\r\n            setMsg({message: \"*please enter a answer\", id:errId})\r\n            setTextAreaClass(prevClass => { return {...prevClass, answerClass: tErrClass }}); \r\n            setMsgValidation(prevMsg => { return {...prevMsg, errAnswer: true } })\r\n            valid = false; \r\n        } else { \r\n            setTextAreaClass(prevClass => { return {...prevClass, answerClass: tNormClass }}); \r\n        }\r\n        return valid;\r\n    }\r\n\r\n    /** Returns true if message is active, false if no message is active */\r\n    function messageActive() {\r\n        if (msgValidation.success || msgValidation.errQuestion || msgValidation.errAnswer) { return true; } \r\n        return false;\r\n    }\r\n\r\n    /* Stores all the questions current active in list */\r\n    const questionList = mainQA.map(QA => { return ( \r\n    <div className=\"myQuestions\" key={QA.id}>\r\n        {QA.question} \r\n        <motion.button variants={buttonVariants} whileHover={{ scale: 1.2 }} whileTap=\"tap\" >\r\n            <FontAwesomeIcon icon={faTrash} size=\"sm\" className=\"remove-btn\" onClick={() => {delQA(QA.id)}}/>\r\n        </motion.button>\r\n    </div>\r\n    )})\r\n\r\n    return (\r\n        <motion.div className=\"container\"\r\n        variants={containerVariants}\r\n        initial=\"hidden\"\r\n        animate=\"visible\"\r\n        exit=\"exit\"\r\n        >\r\n            {/* Modal */}\r\n            <QuestionsModal show={modalShow} onHide={() => setModalShow(false)} questionlist={questionList} />\r\n            {/* Header */}\r\n            <motion.div variants={fadeIn} className=\"questions-header\">\r\n                <Link to=\"/\"><FontAwesomeIcon icon={faChevronLeft} size=\"2x\" className=\"return-btn\"/></Link>\r\n                <motion.button \r\n                variants={buttonVariants} \r\n                whileHover=\"hover\" \r\n                whileTap=\"tap\" onClick={() => setModalShow(true)} className=\"main-btn\">view questions</motion.button>\r\n            </motion.div>\r\n            {/* Form */}\r\n            <form className=\"myForm\" onSubmit={(handleSubmit)}>\r\n                {/* Question input */}\r\n                <motion.p variants={fadeIn} className=\"label\">enter a question</motion.p>\r\n                <motion.textarea variants={fadeIn} className={textAreaClass.questionClass} id=\"question\" name=\"question\" onChange={handleChange} ></motion.textarea>\r\n                {/* Answer input */}\r\n                <motion.p variants={fadeIn} className=\"label\" id=\"qLabelAnswer\">enter the answer</motion.p>\r\n                <motion.textarea variants={fadeIn} className={textAreaClass.answerClass} id=\"answer\" name=\"answer\" onChange={handleChange} ></motion.textarea>\r\n                {/* Submit button */}\r\n                <motion.div variants={fadeIn} className=\"Q-btnContainer\">\r\n                    <motion.input variants={buttonVariants} whileHover=\"hover\" whileTap=\"tap\" type=\"submit\" value=\"add\" className=\"main-btn\"/>\r\n                </motion.div>\r\n            </form>\r\n            {/* Form messages */}\r\n            <div className=\"q-message\">\r\n                <motion.p variants={msgVariants} animate={messageActive() ? \"active\" : \"inactive\"} id={msg.id}>{msg.message}</motion.p>\r\n            </div>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Questions","import React, { useState } from 'react'\r\nimport { motion } from 'framer-motion'\r\n\r\nconst QuizEnter = ({QAcopy, getResult, currQuestion, addAnswer, containerVariantsChild, fadeIn, buttonVariants}) => {\r\n    /** Stores local answer input */\r\n    const [lclAns, setLclAns] = useState({answer: \"\"});\r\n\r\n    /**\r\n     * Handles every user change\r\n     * @param {event} e - event that user triggerred\r\n     */\r\n    const handleChange = (e) => { \r\n        setLclAns((prevAnswer) => ({...prevAnswer, [e.target.id]: e.target.value})) \r\n    }\r\n\r\n    /**\r\n     * Handles Submit button\r\n     * @param {event} e - event that user triggerred \r\n     */\r\n    const handleSubmit = (e) => { \r\n        e.preventDefault();\r\n        e.target.reset();\r\n        // Send info to parent (Quiz.js)...\r\n        addAnswer(lclAns);\r\n        getResult(1);        \r\n    }\r\n\r\n    return (\r\n        <motion.div variants={containerVariantsChild} initial=\"hidden\" animate=\"visible\" exit=\"exit\">\r\n            {/* QUESTION */}\r\n            <div className=\"quiz-questionBox\">\r\n                <motion.p variants={fadeIn}>{currQuestion+1}/{QAcopy.length}</motion.p>\r\n                <motion.p variants={fadeIn} className=\"label\">{QAcopy[currQuestion].question}</motion.p>\r\n            </div>\r\n                {/* ENTER ANSWER */}\r\n            <div>\r\n                <form className=\"myForm\" id=\"quizResult-form\" onSubmit={handleSubmit}>\r\n                    <motion.p variants={fadeIn} className=\"label\">Enter the answer</motion.p>\r\n                    <motion.textarea variants={fadeIn} className=\"textArea areaNormal\" id=\"answer\" name=\"answer\" onChange={handleChange}></motion.textarea>\r\n                    <motion.div variants={fadeIn} className=\"Q-btnContainer\">\r\n                        <motion.input\r\n                        variants={buttonVariants} \r\n                        animate ={lclAns.answer ? \"active\" : \"inactive\" }\r\n                        whileHover=\"hover\" \r\n                        whileTap=\"tap\" \r\n                        type=\"submit\" \r\n                        value=\"Submit\" \r\n                        className=\"main-btn\"/>\r\n                    </motion.div>\r\n                </form>\r\n            </div>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default QuizEnter\r\n","import React from 'react'\r\nimport { motion } from 'framer-motion'\r\n\r\nconst QuizResult = ({QAcopy, answer, getResult, currQuestion, setQuestionIndex, containerVariantsChild, fadeIn, buttonVariants}) => {\r\n    \r\n    /** Handle event for next button */\r\n    const handleNext = () => {\r\n        // Increment index \r\n        setQuestionIndex(currQuestion + 1);\r\n\r\n        // IF went through all the questions \r\n        if (currQuestion >= QAcopy.length-1) {  getResult(2); return;  }\r\n\r\n        // IF NOT Send 0 as result instead of 2\r\n        getResult(0);  \r\n    }\r\n\r\n    return (\r\n        <motion.div className=\"quiz-body\" variants={containerVariantsChild} initial=\"hidden\" animate=\"visible\" exit=\"exit\">\r\n            {/* QUESTION */}\r\n            <div className=\"quiz-questionBox\">\r\n                <motion.p variants={fadeIn}>{currQuestion+1}/{QAcopy.length}</motion.p>\r\n                <motion.p variants={fadeIn} className=\"label\">{QAcopy[currQuestion].question}</motion.p>\r\n            </div>\r\n                {/* ANSWERS */}\r\n            <div className=\"quiz-answerBox\">\r\n                {/* The answer */}\r\n                <motion.p variants={fadeIn} className=\"label\">The answer</motion.p>\r\n                <motion.p variants={fadeIn} >{ QAcopy[currQuestion].answer }</motion.p>\r\n                {/* 'Your' answer */}\r\n                <motion.p variants={fadeIn} className=\"label\">Your answer</motion.p>\r\n                <motion.p variants={fadeIn} >{ answer.answer }</motion.p>\r\n                {/* Next */}\r\n                <motion.div variants={fadeIn} className=\"Q-btnContainer\">\r\n                    <motion.button variants={buttonVariants} whileHover=\"hover\" \r\n                    whileTap=\"tap\" className=\"main-btn\" onClick={handleNext}>next</motion.button>\r\n                </motion.div>\r\n            </div>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default QuizResult\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { motion } from 'framer-motion'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\n/**\r\n * Allows the user to exit (return home) or restart the quiz\r\n * @param {variants} containerVariantsChild - container variant for component\r\n * @param {variants} fadeIn - fade in for elements\r\n */\r\nconst QuizComplete = ({ addAnswer, setQuestionIndex, getResult, containerVariantsChild, fadeIn }) => {\r\n    /** Stores empty answer input */\r\n    const [emptyAnswer] = useState({answer: \"\"});\r\n    \r\n    /** Resets all data to restart the quiz */\r\n    const restart = () => {\r\n        // Reset & send info to parent (Quiz.js)...\r\n        addAnswer(emptyAnswer);\r\n        setQuestionIndex(0);\r\n        getResult(0);\r\n    }\r\n\r\n    return (\r\n        <motion.div variants={containerVariantsChild}\r\n        initial=\"hidden\" animate=\"visible\" exit=\"exit\"\r\n        >\r\n            <div className=\"quizComplete-header\">\r\n                <motion.h1 variants={fadeIn} >quiz complete</motion.h1>\r\n                <motion.h2 variants={fadeIn}>select one of the following options</motion.h2>\r\n            </div>\r\n            <motion.div className=\"quizComplete-body\" variants={fadeIn}>\r\n                <Row>\r\n                    <Col><button onClick={restart} id=\"btn-restart\">restart</button></Col>\r\n                    <Col><Link to=\"/\"><button id=\"btn-exit\">exit</button></Link></Col>\r\n                </Row>\r\n            </motion.div>\r\n\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default QuizComplete\r\n","import React, { useState } from 'react'\r\nimport QuizEnter from './pages/QuizEnter'\r\nimport QuizResult from './pages/QuizResult'\r\nimport QuizComplete from './pages/QuizComplete'\r\nimport { Link } from 'react-router-dom'\r\nimport { motion } from 'framer-motion'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\n/** Variant for main container */\r\nconst containerVariants = {\r\n    hidden: { x: 300, opacity: 0,},\r\n    visible: { x: 0, opacity: 1, \r\n        transition: { staggerChildren: 0.1 } },\r\n    exit: { x: 300, opacity: 0 }\r\n};\r\n/** Variant for child component containers */\r\nconst containerVariantsChild = {\r\n    hidden: { opacity: 0,},\r\n    visible: { opacity: 1, \r\n        transition: { staggerChildren: 0.1 } },\r\n    exit: { opacity: 0 }\r\n};\r\n/** Fade in variant */\r\nconst fadeIn = {\r\n    hidden: { opacity: 0 },\r\n    visible: { opacity: 1 }\r\n}\r\n/** Vairants for buttons */\r\nconst buttonVariants = {\r\n    active: { opacity: 1, x: 0 },\r\n    inactive: { opacity: 0, x: -10  },\r\n    hover: { scale: 1.1 },\r\n    tap: { scale: 0.9 }\r\n}\r\n\r\n/**\r\n * Start of the quiz implementation. Parent of the pages QuizEnter,\r\n * QuizResult, and QuizComplete.\r\n * @param {QA} mainQA - reference to the QA state from App.js \r\n */\r\nconst Quiz = ({mainQA}) => {\r\n    /** Copy of the main QA state */\r\n    const [QAcopy] = useState([...mainQA]);\r\n    /** Index of current question */\r\n    const [currQuestion, setCurrQuestion] = useState(0);\r\n    /** Stores every answer input */\r\n    const [answer, setAnswer] = useState({answer: \"\"});\r\n    /** Determines the render of the body */\r\n    const [result, setResult] = useState(0);\r\n\r\n    /* \r\n    * This function shuffles the copy version of the main QA state array\r\n    * Part of the solution is from:\r\n    * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n    */\r\n    const shuffle = () => {\r\n        var currentIndex = QAcopy.length, temporaryValue, randomIndex;\r\n\r\n        // While there remains elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // And swap it with the current element\r\n            temporaryValue = QAcopy[currentIndex];\r\n            QAcopy[currentIndex] = QAcopy[randomIndex];\r\n            QAcopy[randomIndex] = temporaryValue;\r\n        }         \r\n    }\r\n\r\n    /**\r\n     * Sets the answer state\r\n     * @param {string} answer - answer entered from QuizEnter \r\n     */\r\n    const addAnswer = (answer) => { setAnswer(answer); }\r\n\r\n    /**\r\n     * Sets the incremented index of the current question\r\n     * @param {number} indexNum - new index number of currQuestion state\r\n     */\r\n    const setQuestionIndex = (indexNum) => { setCurrQuestion(indexNum); }\r\n\r\n    /**\r\n     * Sets the state of the result (0 = enter, 1 = result, 2 = complete)\r\n     * @param {boolean} result - result controlled by child components\r\n     */\r\n    const getResult = (result) => { setResult(result) }\r\n\r\n    /**\r\n     * Returns the correct functional component\r\n     * @param {boolean} result - current state of result\r\n     */\r\n    function setBody (result) {\r\n        // Shuffle questions \r\n        if (currQuestion === 0 && answer.answer === \"\") { shuffle(); }\r\n\r\n        // Determine render result \r\n        if (result === 0) {\r\n            return <QuizEnter QAcopy={QAcopy} getResult={getResult} currQuestion={currQuestion} \r\n                        addAnswer={addAnswer} containerVariantsChild={containerVariantsChild} \r\n                        fadeIn={fadeIn} buttonVariants={buttonVariants} />\r\n        } else if (result === 1) {\r\n            return <QuizResult QAcopy={QAcopy} getResult={getResult} currQuestion={currQuestion} answer={answer} \r\n                        setQuestionIndex={setQuestionIndex} containerVariantsChild={containerVariantsChild} \r\n                        buttonVariants={buttonVariants} fadeIn={fadeIn} />\r\n        } else if (result === 2) {\r\n            return <QuizComplete containerVariantsChild={containerVariantsChild} fadeIn={fadeIn} addAnswer={addAnswer}\r\n                        setQuestionIndex={setQuestionIndex} getResult={getResult} />\r\n        } \r\n    }\r\n\r\n    return (\r\n        <motion.div className=\"container\" variants={containerVariants} initial=\"hidden\" animate=\"visible\" exit=\"exit\">\r\n            {/* Header */}\r\n            <motion.div className=\"quiz-header\" variants={fadeIn}>\r\n                <Link to=\"/\" ><FontAwesomeIcon icon={faChevronLeft} size=\"2x\" className=\"return-btn\"/></Link>\r\n            </motion.div>\r\n            {/* Call to determine render */}\r\n            {setBody(result)}\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Quiz\r\n","import React, {useState} from 'react'\r\nimport Home from './components/Home'\r\nimport Questions from './components/Questions'\r\nimport Quiz from './components/Quiz'\r\nimport { Route, Switch, useLocation } from 'react-router-dom'\r\nimport { AnimatePresence } from 'framer-motion'\r\n\r\n/**\r\n * Main function component of Study Buddy\r\n */\r\nfunction App() {\r\n  /** Used to store the current location of the present page */\r\n  const location = useLocation();\r\n  /** useState for App */\r\n  const [QA, setQA] = useState([\r\n    {id: 0, question: \"What language is React written in?\", answer: \"JavaScript\"},\r\n    {id: 1, question: \"What company created React?\", answer: \"Facebook\"},\r\n    {id: 2, question: \"What does DOM stand for?\", answer: \"Document Object Model\"}\r\n  ]);\r\n\r\n  /**\r\n   * Adds a question + answer attached\r\n   * @param {string} question - question entered by user\r\n   * @param {string} answer - answer to question entered by user\r\n   */\r\n  const addQA = (question, answer) => {\r\n    setQA(prevQA => [...prevQA, {\r\n      id: prevQA.length,\r\n      question: question,\r\n      answer: answer\r\n    }])\r\n  }\r\n\r\n  /**\r\n   * Deletes a question + answer attached\r\n   * @param {number} id - id represents the question + answer that will be deleted\r\n   */\r\n  const delQA = (id) => {\r\n    let mainQA = QA.filter(currQA => {\r\n      return currQA.id !== id\r\n    });\r\n    setQA([...mainQA])\r\n  }\r\n\r\n  return (\r\n    <AnimatePresence exitBeforeEnter>\r\n      <Switch location={location} key={location.key} basename=\"StudyBuddy/\">\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/questions\"><Questions addQA={addQA} delQA={delQA} mainQA={QA} /></Route>\r\n        <Route path=\"/quiz\"><Quiz mainQA={QA} /></Route>\r\n      </Switch>\r\n    </AnimatePresence>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();"],"sourceRoot":""}