[{"E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\index.js":"1","E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\App.js":"2","E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\reportWebVitals.js":"3","E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\Home.js":"4","E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\Questions.js":"5","E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\QuestionsModal.js":"6","E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\Quiz.js":"7","E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\pages\\QuizEnter.js":"8","E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\pages\\QuizComplete.js":"9","E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\pages\\QuizResult.js":"10","E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\ebconfig.js":"11"},{"size":660,"mtime":1622482275129,"results":"12","hashOfConfig":"13"},{"size":2067,"mtime":1622496457790,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1611591855692,"results":"15","hashOfConfig":"13"},{"size":1386,"mtime":1611608479532,"results":"16","hashOfConfig":"13"},{"size":7804,"mtime":1622496487582,"results":"17","hashOfConfig":"13"},{"size":1413,"mtime":1611608479533,"results":"18","hashOfConfig":"13"},{"size":5308,"mtime":1622496454358,"results":"19","hashOfConfig":"13"},{"size":2259,"mtime":1622496348572,"results":"20","hashOfConfig":"13"},{"size":1597,"mtime":1611591855690,"results":"21","hashOfConfig":"13"},{"size":1885,"mtime":1611591855691,"results":"22","hashOfConfig":"13"},{"size":200,"mtime":1622482610592,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"682oyb",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\index.js",[],["48","49"],"E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\App.js",["50"],"E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\reportWebVitals.js",[],"E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\Home.js",[],"E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\Questions.js",[],"E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\QuestionsModal.js",[],"E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\Quiz.js",["51","52"],"import React, { useState, useEffect } from 'react'\r\nimport QuizEnter from './pages/QuizEnter'\r\nimport QuizResult from './pages/QuizResult'\r\nimport QuizComplete from './pages/QuizComplete'\r\nimport { Link } from 'react-router-dom'\r\nimport { motion } from 'framer-motion'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport { useEasybase } from 'easybase-react';\r\n\r\n/** Variant for main container */\r\nconst containerVariants = {\r\n    hidden: { x: 300, opacity: 0,},\r\n    visible: { x: 0, opacity: 1, \r\n        transition: { staggerChildren: 0.1 } },\r\n    exit: { x: 300, opacity: 0 }\r\n};\r\n/** Variant for child component containers */\r\nconst containerVariantsChild = {\r\n    hidden: { opacity: 0,},\r\n    visible: { opacity: 1, \r\n        transition: { staggerChildren: 0.1 } },\r\n    exit: { opacity: 0 }\r\n};\r\n/** Fade in variant */\r\nconst fadeIn = {\r\n    hidden: { opacity: 0 },\r\n    visible: { opacity: 1 }\r\n}\r\n/** Vairants for buttons */\r\nconst buttonVariants = {\r\n    active: { opacity: 1, x: 0 },\r\n    inactive: { opacity: 0, x: -10  },\r\n    hover: { scale: 1.1 },\r\n    tap: { scale: 0.9 }\r\n}\r\n\r\n/**\r\n * Start of the quiz implementation. Parent of the pages QuizEnter,\r\n * QuizResult, and QuizComplete.\r\n * @param {QA} mainQA - reference to the QA state from App.js \r\n */\r\nconst Quiz = ({mainQA, frame}) => {\r\n    /** Copy of the main QA state */\r\n    const [QAcopy] = useState([...mainQA]);\r\n    /** Index of current question */\r\n    const [currQuestion, setCurrQuestion] = useState(0);\r\n    /** Stores every answer input */\r\n    const [answer, setAnswer] = useState({answer: \"\"});\r\n    /** Determines the render of the body */\r\n    const [result, setResult] = useState(-1);\r\n\r\n    /* \r\n    * This function shuffles the copy version of the main QA state array\r\n    * Part of the solution is from:\r\n    * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n    */\r\n    const shuffle = () => {\r\n        var currentIndex = QAcopy.length, temporaryValue, randomIndex;\r\n\r\n        // While there remains elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // And swap it with the current element\r\n            temporaryValue = QAcopy[currentIndex];\r\n            QAcopy[currentIndex] = QAcopy[randomIndex];\r\n            QAcopy[randomIndex] = temporaryValue;\r\n        }         \r\n    }\r\n\r\n    /**\r\n     * Sets the answer state\r\n     * @param {string} answer - answer entered from QuizEnter \r\n     */\r\n    const addAnswer = (answer) => { setAnswer(answer); }\r\n\r\n    /**\r\n     * Sets the incremented index of the current question\r\n     * @param {number} indexNum - new index number of currQuestion state\r\n     */\r\n    const setQuestionIndex = (indexNum) => { setCurrQuestion(indexNum); }\r\n\r\n    /**\r\n     * Sets the state of the result (0 = enter, 1 = result, 2 = complete, -1 empty state)\r\n     * @param {boolean} result - result controlled by child components\r\n     */\r\n    const getResult = (result) => { setResult(result) }\r\n\r\n    useEffect(() => {\r\n        // No questions in database\r\n        if (frame.length === 0) { \r\n        setResult(-1); \r\n        }\r\n        // Shuffle questions \r\n        else if (currQuestion === 0 && answer.answer === \"\") { \r\n            setResult(0); \r\n            shuffle(); \r\n        }\r\n    })\r\n\r\n    /**\r\n     * Returns the correct functional component\r\n     * @param {boolean} result - current state of result\r\n     */\r\n    function SetBody(props) {\r\n        console.log(QAcopy)\r\n        // Determine render result \r\n        if (props.result === -1) {\r\n            return \"No questions currently exists.\"\r\n        } \r\n        else if (props.result === 0) {\r\n            return <QuizEnter QAcopy={QAcopy} getResult={getResult} currQuestion={currQuestion} \r\n                        addAnswer={addAnswer} containerVariantsChild={containerVariantsChild} \r\n                        fadeIn={fadeIn} buttonVariants={buttonVariants} frame={frame}/>\r\n        } \r\n        else if (props.result === 1) {\r\n            return <QuizResult QAcopy={QAcopy} getResult={getResult} currQuestion={currQuestion} answer={answer} \r\n                        setQuestionIndex={setQuestionIndex} containerVariantsChild={containerVariantsChild} \r\n                        buttonVariants={buttonVariants} fadeIn={fadeIn} />\r\n        } \r\n        else if (props.result === 2) {\r\n            return <QuizComplete containerVariantsChild={containerVariantsChild} fadeIn={fadeIn} addAnswer={addAnswer}\r\n                        setQuestionIndex={setQuestionIndex} getResult={getResult} />\r\n        } \r\n    }\r\n\r\n    return (\r\n        <motion.div className=\"container\" variants={containerVariants} initial=\"hidden\" animate=\"visible\" exit=\"exit\">\r\n            {/* Header */}\r\n            <motion.div className=\"quiz-header\" variants={fadeIn}>\r\n                <Link to=\"/\" ><FontAwesomeIcon icon={faChevronLeft} size=\"2x\" className=\"return-btn\"/></Link>\r\n            </motion.div>\r\n            {/* Call to determine render */}\r\n            <SetBody result={result} />\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Quiz\r\n","E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\pages\\QuizEnter.js",[],"E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\pages\\QuizComplete.js",[],"E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\components\\pages\\QuizResult.js",[],"E:\\Workspace\\Web Programming\\StudyBuddy\\StudyBuddy\\src\\ebconfig.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":29,"column":6,"nodeType":"59","endLine":29,"endColumn":8,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":9,"column":10,"nodeType":"63","messageId":"64","endLine":9,"endColumn":21},{"ruleId":"57","severity":1,"message":"65","line":93,"column":5,"nodeType":"63","endLine":93,"endColumn":14,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'mounted'. Either include it or remove the dependency array.","ArrayExpression",["69"],"no-unused-vars","'useEasybase' is defined but never used.","Identifier","unusedVar","React Hook useEffect contains a call to 'setResult'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [frame.length, currQuestion, answer.answer, shuffle] as a second argument to the useEffect Hook.",["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [mounted]",{"range":"75","text":"76"},"Add dependencies array: [frame.length, currQuestion, answer.answer, shuffle]",{"range":"77","text":"78"},[991,993],"[mounted]",[3514,3514],", [frame.length, currQuestion, answer.answer, shuffle]"]