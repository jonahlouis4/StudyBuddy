[{"D:\\Workspace\\StudyBuddy\\src\\index.js":"1","D:\\Workspace\\StudyBuddy\\src\\App.js":"2","D:\\Workspace\\StudyBuddy\\src\\reportWebVitals.js":"3","D:\\Workspace\\StudyBuddy\\src\\ebconfig.js":"4","D:\\Workspace\\StudyBuddy\\src\\pages\\Home.js":"5","D:\\Workspace\\StudyBuddy\\src\\pages\\Quiz.js":"6","D:\\Workspace\\StudyBuddy\\src\\pages\\LogIn.js":"7","D:\\Workspace\\StudyBuddy\\src\\pages\\Questions.js":"8","D:\\Workspace\\StudyBuddy\\src\\pages\\components\\Nav.js":"9","D:\\Workspace\\StudyBuddy\\src\\pages\\components\\QuestionsModal.js":"10","D:\\Workspace\\StudyBuddy\\src\\pages\\components\\Footer.js":"11","D:\\Workspace\\StudyBuddy\\src\\pages\\quiz_pages\\QuizResult.js":"12","D:\\Workspace\\StudyBuddy\\src\\pages\\quiz_pages\\Error.js":"13","D:\\Workspace\\StudyBuddy\\src\\pages\\quiz_pages\\QuizEnter.js":"14","D:\\Workspace\\StudyBuddy\\src\\pages\\quiz_pages\\QuizComplete.js":"15","D:\\Workspace\\StudyBuddy\\src\\pages\\Login.js":"16"},{"size":652,"mtime":1647323075657,"results":"17","hashOfConfig":"18"},{"size":1379,"mtime":1648626333595,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1647323075660,"results":"20","hashOfConfig":"18"},{"size":200,"mtime":1648619233687,"results":"21","hashOfConfig":"18"},{"size":2947,"mtime":1647323075658,"results":"22","hashOfConfig":"18"},{"size":5266,"mtime":1648617073176,"results":"23","hashOfConfig":"18"},{"size":5839,"mtime":1648619154863,"results":"24","hashOfConfig":"18"},{"size":6935,"mtime":1647325054924,"results":"25","hashOfConfig":"18"},{"size":1267,"mtime":1647323075659,"results":"26","hashOfConfig":"18"},{"size":2600,"mtime":1647323075659,"results":"27","hashOfConfig":"18"},{"size":1451,"mtime":1647323075658,"results":"28","hashOfConfig":"18"},{"size":3599,"mtime":1648625280056,"results":"29","hashOfConfig":"18"},{"size":1219,"mtime":1647323075659,"results":"30","hashOfConfig":"18"},{"size":3044,"mtime":1648616972109,"results":"31","hashOfConfig":"18"},{"size":1999,"mtime":1647323075659,"results":"32","hashOfConfig":"18"},{"size":6613,"mtime":1648622820768,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1fntez1",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},"D:\\Workspace\\StudyBuddy\\src\\index.js",[],["72","73"],"D:\\Workspace\\StudyBuddy\\src\\App.js",[],"D:\\Workspace\\StudyBuddy\\src\\reportWebVitals.js",[],"D:\\Workspace\\StudyBuddy\\src\\ebconfig.js",[],"D:\\Workspace\\StudyBuddy\\src\\pages\\Home.js",[],"D:\\Workspace\\StudyBuddy\\src\\pages\\Quiz.js",["74","75"],"import React, { useState, useEffect } from 'react'\r\nimport Nav from './components/Nav'\r\nimport Footer from './components/Footer'\r\nimport QuizEnter from './quiz_pages/QuizEnter'\r\nimport QuizResult from './quiz_pages/QuizResult'\r\nimport QuizComplete from './quiz_pages/QuizComplete'\r\nimport Error from './quiz_pages/Error'\r\nimport { Link } from 'react-router-dom'\r\nimport { motion } from 'framer-motion'\r\nimport { useEasybase } from 'easybase-react';\r\n\r\n/* CONSTANTS */\r\nconst ERROR_PAGE = -1\r\nconst ENTER_PAGE = 0\r\nconst RESULT_PAGE = 1\r\nconst COMPLETE_PAGE = 2\r\n\r\n/** Variant for main container */\r\nconst containerVariants = {\r\n    visible: { \r\n        transition: { \r\n            staggerChildren: 0.1 \r\n        } \r\n    },\r\n};\r\n/** Variant for child component containers */\r\nconst containerVariantsChild = {\r\n    hidden: { opacity: 0,},\r\n    visible: { opacity: 1, \r\n        transition: { staggerChildren: 0.1 } },\r\n    exit: { opacity: 0 }\r\n};\r\n/** Fade in variant */\r\nconst fadeIn = {\r\n    hidden: { opacity: 0 },\r\n    visible: { opacity: 1 }\r\n}\r\n/** Vairants for buttons */\r\nconst buttonVariants = {\r\n    active: { opacity: 1, x: 0 },\r\n    inactive: { opacity: 0, x: -10  },\r\n}\r\n\r\n/**\r\n * Start of the quiz implementation. Parent of the pages QuizEnter,\r\n * QuizResult, and QuizComplete.\r\n * @param {QA} mainQA - reference to the QA state from App.js \r\n */\r\nconst Quiz = () => {\r\n    /** Index of current question */\r\n    const [currQuestion, setCurrQuestion] = useState(0);\r\n    /** Stores every answer input */\r\n    const [answer, setAnswer] = useState({answer: \"\"});\r\n    /** Determines the render of the body */\r\n    const [result, setResult] = useState(ERROR_PAGE);\r\n    /** Easybase db and useReturn to fetch data when changed */\r\n    const { db, useReturn } = useEasybase();\r\n    /** Frame created to fetch data when changed */\r\n    const { frame } = useReturn(() => db(\"QUIZ CONTENT\").return(), []);\r\n    /** Holds all question & answers */\r\n    const [QA, setQA] = useState([...frame]);\r\n\r\n    useEffect(() => {\r\n        frame.map( element => {\r\n            setQA(prev => [...prev, element])\r\n        })\r\n    }, [frame])\r\n\r\n    /**\r\n     * Sets the answer state\r\n     * @param {string} answer - answer entered from QuizEnter \r\n     */\r\n    const addAnswer = (answer) => { setAnswer(answer); }\r\n\r\n    /**\r\n     * Sets the incremented index of the current question\r\n     * @param {number} indexNum - new index number of currQuestion state\r\n     */\r\n    const setQuestionIndex = (indexNum) => { setCurrQuestion(indexNum); }\r\n\r\n    /**\r\n     * Sets the state of the result (0 = enter, 1 = result, 2 = complete, -1 empty state)\r\n     * @param {boolean} result - result controlled by child components\r\n     */\r\n    const getResult = (result) => { setResult(result) }\r\n\r\n    useEffect(() => {\r\n        // No questions in database\r\n        if (QA.length === 0) { \r\n        setResult(ERROR_PAGE); \r\n        }\r\n        // Shuffle questions \r\n        else if (currQuestion === 0 && answer.answer === \"\") { \r\n            QA.sort(function(a, b){ return 0.5 - Math.random() })\r\n            setResult(ENTER_PAGE); \r\n        }\r\n    }, [QA.length, currQuestion, answer.answer])\r\n\r\n    /**\r\n     * Returns the correct functional component\r\n     * @param {boolean} result - current state of result\r\n     */\r\n    const SetBody = ({result}) => {\r\n        // Determine render result \r\n        if (result === ERROR_PAGE) {\r\n            return <Error containerVariantsChild={containerVariantsChild} \r\n                        fadeIn={fadeIn} buttonVariants={buttonVariants} />\r\n        } \r\n        else if (result === ENTER_PAGE) {\r\n            return <QuizEnter getResult={getResult} currQuestion={currQuestion} \r\n                        addAnswer={addAnswer} containerVariantsChild={containerVariantsChild} \r\n                        fadeIn={fadeIn} buttonVariants={buttonVariants} QA={QA}/>\r\n        } \r\n        else if (result === RESULT_PAGE) {\r\n            return <QuizResult getResult={getResult} currQuestion={currQuestion} answer={answer} \r\n                        setQuestionIndex={setQuestionIndex} containerVariantsChild={containerVariantsChild} \r\n                        buttonVariants={buttonVariants} fadeIn={fadeIn} QA={QA}/>\r\n        } \r\n        else if (result === COMPLETE_PAGE) {\r\n            return <QuizComplete containerVariantsChild={containerVariantsChild} fadeIn={fadeIn} addAnswer={addAnswer}\r\n                        setQuestionIndex={setQuestionIndex} getResult={getResult} />\r\n        } \r\n    }\r\n\r\n    return (\r\n        <div\r\n        className=\"main--wrapper bg--container--1\"\r\n        >\r\n            <Nav />\r\n            <motion.div \r\n            className=\"container\" \r\n            variants={containerVariants} \r\n            initial=\"hidden\" \r\n            animate=\"visible\" \r\n            exit=\"exit\"\r\n            >\r\n                <ol \r\n                className=\"breadcrumb pl-0 mt-3\"\r\n                >\r\n                    <li className=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\r\n                    <li className=\"breadcrumb-item active\" aria-current=\"page\">Quiz</li>\r\n                </ol>\r\n                <SetBody result={result} />\r\n            </motion.div>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Quiz\r\n","D:\\Workspace\\StudyBuddy\\src\\pages\\LogIn.js",["76","77"],"import React, { useState } from 'react'\r\nimport Nav from './components/Nav'\r\nimport Footer from './components/Footer'\r\nimport { useEasybase } from 'easybase-react';\r\nimport { Form } from 'react-bootstrap';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport OverlayTrigger  from 'react-bootstrap/OverlayTrigger';\r\n\r\nconst LogIn = () => {\r\n    /** User authentication */\r\n    const { signIn, signUp } = useEasybase();\r\n    /** Username */\r\n    const [username, setUsername] = useState(\"\");\r\n    /** Password */\r\n    const [password, setPassword] = useState(\"\");\r\n    /** Validates form */\r\n    const [validated, setValidated] = useState(false);\r\n    /** True = signin, false = signup */\r\n    const [formType, setType] = useState(true);\r\n\r\n    /** Handle submission of form */\r\n    const handleSubmit = (event) => {\r\n      const form = event.currentTarget;\r\n\r\n      event.preventDefault();\r\n\r\n      if (form.checkValidity() === false) {\r\n        event.stopPropagation();\r\n      } else {\r\n        const signIn = formType;\r\n\r\n        if (signIn === true) {\r\n            onSignInClick();\r\n        } else {\r\n            onSignUpClick();\r\n\r\n            // Timeout required user to be redirected to home\r\n            setTimeout(() => {\r\n                window.location.reload();\r\n                }, 1000);\r\n        }\r\n      }\r\n  \r\n      setValidated(true);\r\n    };\r\n\r\n    const onSignInClick = async () => {\r\n        const res = await signIn(username, password);\r\n        if (res.success) {\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n        }\r\n    }\r\n\r\n    const onSignUpClick = async () => {\r\n        const res = await signUp(username, password);\r\n        if (res.success) {\r\n        await signIn(username, password);\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n        }\r\n    }\r\n\r\n    const myFormType = () => {\r\n        const signIn = formType;\r\n        if (signIn === true) {\r\n            return  <>\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Sign In</button>\r\n                        <a role=\"button\" className=\"ml-sm-1 btn btn-link\" onClick={() => setType(false)}>Or create an account</a>\r\n                    </>\r\n        } else {\r\n            return <>\r\n                        <button className=\"btn btn-danger\" type=\"submit\">Sign Up</button>\r\n                        <a role=\"button\" className=\"ml-sm-1 btn btn-link\" onClick={() => setType(true)}>Or return to sign in</a>\r\n                    </>\r\n        }\r\n    }\r\n\r\n    const myFormTitle = () => {\r\n        const signIn = formType;\r\n        if (signIn === true) {\r\n            return  <>\r\n                        <h1>Sign In</h1>\r\n                    </>\r\n        } else {\r\n            return <>\r\n                        <h1>Create an Account</h1>\r\n                    </>\r\n        }\r\n    }\r\n\r\n    const popover = (\r\n        <Popover id=\"popover-basic\">\r\n          <Popover.Title as=\"h3\">Sign in with the following:</Popover.Title>\r\n          <Popover.Content style={{fontWeight:600}}>\r\n            Username: <span style={{fontWeight:400}}>studybuddytest</span>\r\n            <br />\r\n            Password: <span style={{fontWeight:400}}>studybuddytest</span>\r\n          </Popover.Content>\r\n        </Popover>\r\n      );\r\n\r\n    return (\r\n        <div\r\n        className=\"bg--container--1 main--wrapper\"\r\n        >\r\n            <Nav logged={false} />\r\n            <div\r\n            className=\"login--wrapper container mb-5\"\r\n            >\r\n                <div\r\n                className=\"text-center\"\r\n                >\r\n                    <h1\r\n                    className=\"mt-5\"\r\n                    >\r\n                        Welcome to StudyBuddy\r\n                    </h1>\r\n                    <h4\r\n                    className=\"text-primary\"\r\n                    >\r\n                        A simple flashcard web application designed for studying.\r\n                    </h4>\r\n                </div>\r\n                <div\r\n                className=\"mt-5 py-5 px-4 px-sm-5 shadow-lg bg-white\"\r\n                >\r\n                    <Form\r\n                    noValidate\r\n                    validated={validated}\r\n                    onSubmit={handleSubmit}\r\n                    >\r\n                        <div\r\n                        className=\"mb-5\"\r\n                        >\r\n                            { myFormTitle() }\r\n                        </div>\r\n                        <Form.Group\r\n                        controlId=\"username\"\r\n                        >\r\n                            <Form.Label>Username</Form.Label>\r\n                            <Form.Control \r\n                            required\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your username\"\r\n                            onChange={e => setUsername(e.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group\r\n                        controlId=\"password\"\r\n                        >\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control \r\n                            required\r\n                            type=\"password\"\r\n                            placeholder=\"Enter your password\"\r\n                            onChange={e => setPassword(e.target.value)} \r\n                            />\r\n                        </Form.Group>\r\n                        { myFormType() }\r\n                    </Form>\r\n                    <div\r\n                    className=\"text-center\"\r\n                    >\r\n                        <OverlayTrigger \r\n                        trigger=\"click\" \r\n                        placement=\"bottom\" \r\n                        overlay={popover}\r\n                        >\r\n                            <button variant=\"success\" className=\"btn btn-link mt-3\">Try it out without signin up</button>\r\n                        </OverlayTrigger>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LogIn\r\n",["78","79"],"D:\\Workspace\\StudyBuddy\\src\\pages\\Questions.js",["80","81"],"import React, { useState, useEffect } from 'react'\r\nimport Nav from './components/Nav'\r\nimport Footer from './components/Footer'\r\nimport QuestionsModal from './components/QuestionsModal'\r\nimport { Link } from 'react-router-dom'\r\nimport { motion } from 'framer-motion'\r\nimport { Form } from 'react-bootstrap'\r\nimport { useEasybase } from 'easybase-react';\r\n\r\n/** Variant for main container */\r\nconst containerVariants = {\r\n    visible: { \r\n        transition: { \r\n            staggerChildren: 0.1 \r\n        } \r\n    },\r\n};\r\n/** Fade in variant */\r\nconst fadeIn = {\r\n    hidden: { opacity: 0 },\r\n    visible: { opacity: 1 }\r\n}\r\n\r\n/**\r\n * Operates the addition of questions + answers and the ability\r\n * to view and remote them.\r\n */\r\nconst Questions = () => { \r\n    /** Local useStates for questions and answers */\r\n    const [QA, setQA] = useState({question:\"\", answer:\"\"})\r\n    /** Sets value to show or hide modal */\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    /** State of form - valid or invalid */\r\n    const [validated, setValidated] = useState(false);\r\n    /** Easybase db and useReturn to fetch data when changed */\r\n    const { db, useReturn } = useEasybase();\r\n    /** Frame created to fetch data when changed */\r\n    const { frame } = useReturn(() => db(\"QUIZ CONTENT\").return(), []);\r\n\r\n    /** Adds all questions from database to state  */\r\n    const mounted = async() => {\r\n        const qaData = await db('QUIZ CONTENT').return().all();\r\n        setQA(qaData);\r\n    }\r\n\r\n    useEffect(() => {\r\n        mounted();\r\n    }, [])\r\n\r\n    /**\r\n    * Adds a question + answer attached\r\n    * @param {string} question - question entered by user\r\n    * @param {string} answer - answer to question entered by user\r\n     */\r\n     const addQA = async(question, answer) => {\r\n        // Add question + answer to db table \"QUIZ CONTENT\"\r\n        await db('QUIZ CONTENT').insert({\r\n          question: question,\r\n          answer: answer\r\n        }).one();\r\n    }\r\n    \r\n    /**\r\n     * Deletes a question + answer attached\r\n     * @param {number} id - id represents the question + answer that will be deleted\r\n     */\r\n        const delQA = async(key) => {\r\n        await db('QUIZ CONTENT', false).delete().where({ _key: key }).one();\r\n    }\r\n\r\n    /**\r\n     * Handles Submit button\r\n     * @param {event} e - event that user triggerred \r\n     */\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        event.preventDefault();\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.stopPropagation();\r\n        } else {\r\n            // Can now copy paste instead of typing evertime \r\n            addQA(document.getElementById('question').value, document.getElementById('answer').value);  \r\n            setQA({question: \"\", answer: \"\"}) \r\n\r\n            // Timeout required for question to be added to serverless database\r\n            setTimeout(() => {\r\n                window.location.reload();\r\n              }, 1000);\r\n        }\r\n        setValidated(true);\r\n    };\r\n\r\n    /**\r\n     * Handles every user change\r\n     * @param {event} e - event that user triggerred\r\n     */\r\n    const handleChange = (e) => { \r\n        // Add every input value to local useState QA\r\n        setQA((prevQA) => ({...prevQA, [e.target.id]: e.target.value})) \r\n    }\r\n\r\n    return (\r\n        <motion.div \r\n        className=\"main--wrapper bg--container--1\"\r\n        variants={containerVariants}\r\n        initial=\"hidden\"\r\n        animate=\"visible\"\r\n        exit=\"exit\"\r\n        >\r\n            <Nav />\r\n            <QuestionsModal \r\n            show={modalShow} \r\n            onHide={() => setModalShow(false)} \r\n            frame={frame}\r\n            delQA={delQA}\r\n            />\r\n            <div\r\n            className=\"container questions--container-1\"\r\n            >\r\n                <motion.div \r\n                variants={fadeIn}\r\n                >\r\n                    <div\r\n                    className=\"row mt-3\"\r\n                    >\r\n                        <div\r\n                        className=\"col-6 text-left\"\r\n                        >\r\n                            <ol \r\n                            className=\"breadcrumb pl-0\"\r\n                            >\r\n                                <li className=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\r\n                                <li className=\"breadcrumb-item active\" aria-current=\"page\">Questions</li>\r\n                            </ol>\r\n                        </div>\r\n                        <div\r\n                        className=\"col-6 text-right\"\r\n                        >\r\n                            <motion.button \r\n                            onClick={() => setModalShow(true)} \r\n                            className=\"btn btn-primary\"\r\n                            >\r\n                                View questions\r\n                            </motion.button>\r\n                        </div>\r\n                    </div>\r\n                </motion.div>\r\n                <motion.div\r\n                variants={fadeIn}\r\n                >\r\n                <Form\r\n                className=\"mt-5\"\r\n                noValidate\r\n                validated={validated}\r\n                onSubmit={handleSubmit}\r\n                >\r\n                    <Form.Group\r\n                    controlId=\"question\"\r\n                    xxl=\"12\"\r\n                    >\r\n                        <Form.Label>Enter a question</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            placeholder=\"Type your question\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter a question.\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>     \r\n                    <Form.Group\r\n                    controlId=\"answer\"\r\n                    xxl=\"12\"\r\n                    >\r\n                        <Form.Label>Enter the answer</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            placeholder=\"Type your answer\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter an answer.\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <button \r\n                    className=\"btn btn-primary\"\r\n                    type=\"submit\"\r\n                    >\r\n                        Add\r\n                    </button>\r\n                </Form>\r\n                </motion.div>\r\n            </div>\r\n            <Footer />\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Questions","D:\\Workspace\\StudyBuddy\\src\\pages\\components\\Nav.js",[],"D:\\Workspace\\StudyBuddy\\src\\pages\\components\\QuestionsModal.js",[],"D:\\Workspace\\StudyBuddy\\src\\pages\\components\\Footer.js",[],"D:\\Workspace\\StudyBuddy\\src\\pages\\quiz_pages\\QuizResult.js",[],"D:\\Workspace\\StudyBuddy\\src\\pages\\quiz_pages\\Error.js",[],"D:\\Workspace\\StudyBuddy\\src\\pages\\quiz_pages\\QuizEnter.js",[],"D:\\Workspace\\StudyBuddy\\src\\pages\\quiz_pages\\QuizComplete.js",[],"D:\\Workspace\\StudyBuddy\\src\\pages\\Login.js",["82","83"],"import React, { useState } from \"react\";\r\nimport Nav from \"./components/Nav\";\r\nimport Footer from \"./components/Footer\";\r\nimport { useEasybase } from \"easybase-react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport Popover from \"react-bootstrap/Popover\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\n\r\nconst LogIn = () => {\r\n  /** User authentication */\r\n  const { signIn, signUp } = useEasybase();\r\n  /** Username */\r\n  const [username, setUsername] = useState(\"\");\r\n  /** Password */\r\n  const [password, setPassword] = useState(\"\");\r\n  /** Validates form */\r\n  const [validated, setValidated] = useState(false);\r\n  /** True = signin, false = signup */\r\n  const [formType, setFormType] = useState(true);\r\n  /** Form Error - Username */\r\n  const [usernameError, setUsernameError] = useState(false);\r\n  /** Form Error - Password */\r\n  const [passwordError, setPasswordError] = useState(false);\r\n  /** Form Success - Username */\r\n  const [usernameSuccess, setUsernameSuccess] = useState(false);\r\n  /** Form Success - Password */\r\n  const [passwordSuccess, setPasswordSuccess] = useState(false);\r\n  /** Form Loading  */\r\n  const [loading, setLoading] = useState(false);\r\n  /** Form Error message - signin or signup */\r\n  const [requestErrorMessage, setRequestErrorMessage] = useState(\"\");\r\n\r\n  /* CONSTANTS */\r\n  const SIGNIN_INVALID_EMAIL = \"Email address and/or password was incorrect.\";\r\n  const SIGNUP_PASSWORD_SHORT = \"Password must be at least 8 characters long.\";\r\n  const SIGNUP_USER_EXISTS = \"An account with that username already exists.\";\r\n  const SIGN_GENERIC_ERROR = \"There was an issue processing your request. Please try again later\";\r\n\r\n  /** Handle submission of form */\r\n  const handleSubmit = (event) => {\r\n    const form = event.currentTarget;\r\n    event.preventDefault();\r\n\r\n    !form.checkValidity() ? event.stopPropagation() : handleRequest();\r\n  };\r\n\r\n  const handleRequest = async () => {\r\n    setLoading(true);\r\n\r\n    // SIGN IN\r\n    if (formType) {\r\n      const res = await signIn(username, password);\r\n      if (res.success) {\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n        setUsernameSuccess(true);\r\n        setPasswordSuccess(true);\r\n      } else {\r\n        setUsernameError(true);\r\n        setPasswordError(true);\r\n        setLoading(false);\r\n        setRequestErrorMessage(SIGNIN_INVALID_EMAIL);\r\n      }\r\n      // SIGN UP\r\n    } else {\r\n      const res = await signUp(username, password);\r\n      if (res.success) {\r\n        await signIn(username, password);\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n      } else if (res.errorCode === \"BadPasswordLength\") {\r\n        setLoading(false);\r\n        setPasswordError(true);\r\n        setRequestErrorMessage(SIGNUP_PASSWORD_SHORT);\r\n      } else if (res.errorCode === \"UserExists\") {\r\n        console.log(res.errorCode);\r\n        setLoading(false);\r\n        setPasswordError(true);\r\n        setRequestErrorMessage(SIGNUP_USER_EXISTS);\r\n      } else {\r\n        setLoading(false);\r\n        setPasswordError(true);\r\n        setRequestErrorMessage(SIGN_GENERIC_ERROR);\r\n      }\r\n    }\r\n  };\r\n\r\n  const FormType = () => {\r\n    const btnClass = formType ? \"btn btn-primary\" : \"btn btn-danger\";\r\n\r\n    return (\r\n      <>\r\n        <button className={btnClass} type=\"submit\">\r\n          {loading ? (\r\n            <span\r\n              className=\"spinner-border spinner-border-sm mr-2\"\r\n              role=\"status\"\r\n              aria-hidden=\"true\"\r\n            ></span>\r\n          ) : null}\r\n          {formType ? \"Sign In\" : \"Sign Up\"}\r\n        </button>\r\n        <a\r\n          role=\"button\"\r\n          className=\"ml-sm-1 btn btn-link\"\r\n          onClick={() => {\r\n            setFormType(!formType);\r\n            setUsernameError(false);\r\n            setPasswordError(false);\r\n          }}\r\n        >\r\n          {formType ? \"Or create an account\" : \"Or return to sign in\"}\r\n        </a>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const FormTitle = () => {\r\n    if (formType) {\r\n      return <h1>Sign In</h1>;\r\n    } else {\r\n      return <h1>Sign Up</h1>;\r\n    }\r\n  };\r\n\r\n  const popover = (\r\n    <Popover id=\"popover-basic\">\r\n      <Popover.Title as=\"h3\">Sign in with the following:</Popover.Title>\r\n      <Popover.Content style={{ fontWeight: 600 }}>\r\n        Username: <span style={{ fontWeight: 400 }}>studybuddytest</span>\r\n        <br />\r\n        Password: <span style={{ fontWeight: 400 }}>studybuddytest</span>\r\n      </Popover.Content>\r\n    </Popover>\r\n  );\r\n\r\n  return (\r\n    <div className=\"bg--container--1 main--wrapper\">\r\n      <Nav logged={false} />\r\n      <div className=\"login--wrapper container mb-5\">\r\n        <div className=\"text-center\">\r\n          <h1 className=\"mt-5\">Welcome to StudyBuddy</h1>\r\n          <h4 className=\"text-primary\">\r\n            A simple flashcard web application designed for studying.\r\n          </h4>\r\n        </div>\r\n        <div className=\"mt-5 py-5 px-4 px-sm-5 shadow-lg bg-white\">\r\n          <Form validated={validated} onSubmit={handleSubmit}>\r\n            <div className=\"mb-5\">\r\n              <FormTitle />\r\n            </div>\r\n            <Form.Group controlId=\"username\">\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"text\"\r\n                placeholder=\"Enter your username\"\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                isInvalid={usernameError}\r\n                isValid={usernameSuccess}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                name=\"password\"\r\n                required\r\n                type=\"password\"\r\n                placeholder=\"Enter your password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                isInvalid={passwordError}\r\n                isValid={passwordSuccess}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {requestErrorMessage}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <FormType />\r\n          </Form>\r\n          <div className=\"text-center\">\r\n            <OverlayTrigger\r\n              trigger=\"click\"\r\n              placement=\"bottom\"\r\n              overlay={popover}\r\n            >\r\n              <button variant=\"success\" className=\"btn btn-link mt-3\">\r\n                Try it out without signin up\r\n              </button>\r\n            </OverlayTrigger>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogIn;\r\n",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":64,"column":28,"nodeType":"90","messageId":"91","endLine":64,"endColumn":30},{"ruleId":"92","severity":1,"message":"93","line":97,"column":8,"nodeType":"94","endLine":97,"endColumn":48,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":69,"column":25,"nodeType":"98","endLine":69,"endColumn":106},{"ruleId":"96","severity":1,"message":"97","line":74,"column":25,"nodeType":"98","endLine":74,"endColumn":105},{"ruleId":"84","replacedBy":"99"},{"ruleId":"86","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":30,"column":12,"nodeType":"103","messageId":"104","endLine":30,"endColumn":14},{"ruleId":"92","severity":1,"message":"105","line":48,"column":8,"nodeType":"94","endLine":48,"endColumn":10,"suggestions":"106"},{"ruleId":"101","severity":1,"message":"107","line":17,"column":21,"nodeType":"103","messageId":"104","endLine":17,"endColumn":33},{"ruleId":"96","severity":1,"message":"97","line":103,"column":9,"nodeType":"98","endLine":111,"endColumn":10},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'QA'. Either include it or remove the dependency array.","ArrayExpression",["110"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["108"],["109"],"no-unused-vars","'QA' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'mounted'. Either include it or remove the dependency array.",["111"],"'setValidated' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [QA.length, currQuestion, answer.answer, QA]",{"range":"116","text":"117"},"Update the dependencies array to be: [mounted]",{"range":"118","text":"119"},[3131,3171],"[QA.length, currQuestion, answer.answer, QA]",[1557,1559],"[mounted]"]